import structlog
import asyncio
from aiogram import Router, F, Bot
from aiogram.filters import Command, CommandStart
from aiogram.types import Message, ChatMemberUpdated
from sqlalchemy.ext.asyncio import AsyncSession
from aiogram.exceptions import TelegramBadRequest

from fluent.runtime import FluentLocalization
from db.connection import get_async_session
from db.queries import register_chat_member, get_user, update_user_xp, get_top_users, create_user, get_user_rank
from games.dice_game import DiceGame
from games.rps_game import RockPaperScissorsGame
from utils.game_tracker import GameTracker

router = Router()
router.message.filter(F.chat.type.in_({"group", "supergroup"}))

logger = structlog.get_logger()


@router.my_chat_member()
async def bot_added_to_group(event: ChatMemberUpdated, l10n: FluentLocalization = None):
    if l10n is None:
        logger.error("FluentLocalization object is missing in bot_added_to_group")
        welcome_text = "–ü—Ä–∏–≤—ñ—Ç! –Ø —ñ–≥—Ä–æ–≤–∏–π –±–æ—Ç. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ /help –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ—ó —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó."
    else:
        welcome_text = f"""üëã <b>–ü—Ä–∏–≤—ñ—Ç, —É—á–∞—Å–Ω–∏–∫–∏ —á–∞—Ç—É {event.chat.title}!</b>
        
–Ø —ñ–≥—Ä–æ–≤–∏–π –±–æ—Ç, —è–∫–∏–π –¥–æ–ø–æ–º–æ–∂–µ –∑—Ä–æ–±–∏—Ç–∏ –≤–∞—à–µ —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è —Ü—ñ–∫–∞–≤—ñ—à–∏–º! ‚≠êÔ∏è
        
–î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏ –¥–ª—è —á–∞—Ç—É:
/help - –ø–æ–∫–∞–∑–∞—Ç–∏ —Ü–µ–π —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥
/dice - –∫–∏–Ω—É—Ç–∏ –∫—É–±–∏–∫ —ñ –æ—Ç—Ä–∏–º–∞—Ç–∏ XP (–≤—ñ–¥–ø—Ä–∞–≤—Ç–µ –µ–º–æ–¥–∂—ñ üé≤ —É –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ –∫–æ–º–∞–Ω–¥—É)
/rps - –∑—ñ–≥—Ä–∞—Ç–∏ –≤ –∫–∞–º—ñ–Ω—å-–Ω–æ–∂–∏—Ü—ñ-–ø–∞–ø—ñ—Ä (–≤—ñ–¥–ø—Ä–∞–≤—Ç–µ –µ–º–æ–¥–∂—ñ ü§ú, üß≥ –∞–±–æ ‚úÇÔ∏è)
/profile - –ø–æ–¥–∏–≤–∏—Ç–∏—Å—å –≤–∞—à –ø—Ä–æ—Ñ—ñ–ª—å
/top - –ø–æ–∫–∞–∑–∞—Ç–∏ —Ç–æ–ø –≥—Ä–∞–≤—Ü—ñ–≤
        
–ü–æ—á–Ω—ñ—Ç—å –≥—Ä–∞—Ç–∏ –∑–∞—Ä–∞–∑ —ñ –æ—Ç—Ä–∏–º—É–π—Ç–µ XP! üåü
–í–∞—à—ñ –¥–æ—Å—è–≥–Ω–µ–Ω–Ω—è –±—É–¥—É—Ç—å –≤—ñ–¥–æ–±—Ä–∞–∂–∞—Ç–∏—Å—å —É —Ä–µ–π—Ç–∏–Ω–≥—É –Ω–∞–π–∫—Ä–∞—â–∏—Ö –≥—Ä–∞–≤—Ü—ñ–≤ —á–∞—Ç—É."""
    
    if event.new_chat_member.status in ["member", "administrator"]:
        await event.bot.send_message(event.chat.id, welcome_text)
        logger.info(f"Bot added to chat {event.chat.id}")


@router.message(Command("help"))
async def cmd_help_in_group(message: Message, l10n: FluentLocalization):
    help_text = f"""üìö <b>–î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏ –≤ —á–∞—Ç—ñ:</b>

/help - –ø–æ–∫–∞–∑–∞—Ç–∏ —Ü–µ–π —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥
/dice - –∫–∏–Ω—É—Ç–∏ –∫—É–±–∏–∫ —ñ –æ—Ç—Ä–∏–º–∞—Ç–∏ XP (–≤—ñ–¥–ø—Ä–∞–≤—Ç–µ –µ–º–æ–¥–∂—ñ üé≤ —É –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ –∫–æ–º–∞–Ω–¥—É)
/rps - –∑—ñ–≥—Ä–∞—Ç–∏ –≤ –∫–∞–º—ñ–Ω—å-–Ω–æ–∂–∏—Ü—ñ-–ø–∞–ø—ñ—Ä (–≤—ñ–¥–ø—Ä–∞–≤—Ç–µ –µ–º–æ–¥–∂—ñ ü§ú, üß≥ –∞–±–æ ‚úÇÔ∏è)
/profile - –ø–æ–¥–∏–≤–∏—Ç–∏—Å—å –≤–∞—à –ø—Ä–æ—Ñ—ñ–ª—å (–∑ —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ—ñ–ª—é)
/top - –ø–æ–∫–∞–∑–∞—Ç–∏ —Ç–æ–ø –≥—Ä–∞–≤—Ü—ñ–≤
/stats - –ø–æ–∫–∞–∑–∞—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —á–∞—Ç—É

<b>–Ø–∫ –ø—Ä–∞—Ü—é—é—Ç—å —ñ–≥—Ä–∏:</b>

üé≤ <b>–ö—É–±–∏–∫</b> - –≤–∏ –∫–∏–¥–∞—î—Ç–µ –µ–º–æ–¥–∂—ñ –∫—É–±–∏–∫–∞, –±–æ—Ç —Ç–∞–∫–æ–∂ –∫–∏–¥–∞—î. –ü–µ—Ä–µ–º–∞–≥–∞—î —Ç–æ–π, —É –∫–æ–≥–æ –±—ñ–ª—å—à–µ –æ—á–∫—ñ–≤. –ü–µ—Ä–µ–º–æ–≥–∞: 10 XP, –ù—ñ—á–∏—è: 3 XP, –ü–æ—Ä–∞–∑–∫–∞: 1 XP.

üñêÔ∏è <b>–ö–∞–º—ñ–Ω—å-–Ω–æ–∂–∏—Ü—ñ-–ø–∞–ø—ñ—Ä</b> - –≤–∏ –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î—Ç–µ –æ–¥–∏–Ω –∑ –µ–º–æ–¥–∂—ñ: ü§ú (–∫–∞–º—ñ–Ω—å), üß≥ (–ø–∞–ø—ñ—Ä) –∞–±–æ ‚úÇÔ∏è (–Ω–æ–∂–∏—Ü—ñ). –ü–µ—Ä–µ–º–æ–≥–∞: 15 XP, –ù—ñ—á–∏—è: 5 XP, –ü–æ—Ä–∞–∑–∫–∞: 2 XP."""
    await message.reply(help_text)


@router.message(Command("stats"))
async def cmd_stats_in_group(message: Message, l10n: FluentLocalization):
    await message.answer("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —á–∞—Ç—É –±—É–¥–µ –¥–æ—Å—Ç—É–ø–Ω–∞ –Ω–µ–∑–∞–±–∞—Ä–æ–º!")


@router.message(Command("top"))
async def cmd_top_in_group(message: Message, l10n: FluentLocalization):
    async for session in get_async_session():
        top_users = await get_top_users(session, limit=3)

        text = f"üèÜ <b>–¢–æ–ø –≥—Ä–∞–≤—Ü—ñ–≤ –∑–∞ XP:</b>\n\n"
        
        for i, user in enumerate(top_users, 1):
            medal = "ü•á" if i == 1 else "ü•à" if i == 2 else "ü•â"
            text += f"{medal} {i}. {user.first_name} - {user.xp} XP\n"
        await message.reply(text)


@router.message(Command("profile"))
async def cmd_profile_in_group(message: Message, l10n: FluentLocalization, bot: Bot):
    user_id = message.from_user.id
    
    async for session in get_async_session():
        user = await get_user(session, user_id)
        if not user:
            user = await create_user(
                session,
                user_id=user_id,
                username=message.from_user.username,
                first_name=message.from_user.first_name,
                last_name=message.from_user.last_name,
                language_code=message.from_user.language_code
            )

        rank = await get_user_rank(session, user_id)

        profile_text = f"""üë§ <b>–ü—Ä–æ—Ñ—ñ–ª—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞</b>

üìõ –Ü–º'—è: {message.from_user.first_name}{f" {message.from_user.last_name}" if message.from_user.last_name else ""}
üÜî ID: {user_id}
üí∞ XP: {user.xp}
üéÅ –ë–æ–Ω—É—Å–∏: {user.bonuses}
üèÜ –í–∞—à–µ –º—ñ—Å—Ü–µ –≤ —Ä–µ–π—Ç–∏–Ω–≥—É: {rank}
‚è≥ –û—Å—Ç–∞–Ω–Ω—è –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å: {user.last_activity.strftime("%d.%m.%Y %H:%M")}
üìÖ –î–∞—Ç–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó: {user.created_at.strftime("%d.%m.%Y %H:%M")}"""

    try:
        user_photos = await bot.get_user_profile_photos(user_id, limit=1)
        if user_photos.total_count > 0:
            photo = user_photos.photos[0][-1]
            await message.reply_photo(photo.file_id, caption=profile_text)
        else:
            await message.reply(profile_text)
    except Exception as e:
        logger.error(f"Error getting profile photo: {e}")
        await message.reply(profile_text)


@router.message(Command("dice"))
async def cmd_dice_in_group(message: Message, l10n: FluentLocalization, bot: Bot):
    """Game of dice in group chat"""
    chat_id = message.chat.id
    user_id = message.from_user.id

    if GameTracker.is_playing(chat_id, "rps", user_id):
        return

    GameTracker.start_game(chat_id, "dice", user_id)

    prompt_message = await message.reply(
        f"""üé≤ <b>–ì—Ä–∞ –≤ –∫—É–±–∏–∫</b>
        
{message.from_user.first_name}, –≤—ñ–¥–ø—Ä–∞–≤—Ç–µ –µ–º–æ–¥–∂—ñ –∫—É–±–∏–∫–∞ üé≤ —É –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ —Ü–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, —â–æ–± –∫–∏–Ω—É—Ç–∏ –∫—É–±–∏–∫."""
    )

    try:
        await asyncio.sleep(30)
        if GameTracker.is_playing(chat_id, "dice", user_id):
            GameTracker.end_game(chat_id, "dice", user_id)
            await prompt_message.delete()
    except Exception as e:
        logger.error(f"Error in dice game timeout: {e}")


@router.message(F.dice, F.reply_to_message)
async def handle_dice_game(message: Message, bot: Bot):
    """Handle dice emoji reply"""
    chat_id = message.chat.id
    user_id = message.from_user.id

    if not message.reply_to_message or message.reply_to_message.from_user.id != bot.id or not GameTracker.is_playing(chat_id, "dice", user_id):
        return

    player_roll = message.dice.value

    bot_dice_message = await message.answer_dice(emoji="üé≤")
    bot_roll = bot_dice_message.dice.value

    await asyncio.sleep(4)

    if player_roll > bot_roll:
        result = "win"
        result_text = "üéâ –í–∏ –ø–µ—Ä–µ–º–æ–≥–ª–∏!"
        xp_reward = 10
    elif player_roll < bot_roll:
        result = "lose"
        result_text = "üò¢ –í–∏ –ø—Ä–æ–≥—Ä–∞–ª–∏, –∞–ª–µ –≤—Å–µ –æ–¥–Ω–æ –æ—Ç—Ä–∏–º—É—î—Ç–µ –Ω–µ–≤–µ–ª–∏–∫–∏–π –±–æ–Ω—É—Å."
        xp_reward = 1
    else:  # draw
        result = "draw"
        result_text = "ü§∑ –ù—ñ—á–∏—è! –ú–æ–∂–µ—Ç–µ —Å–ø—Ä–æ–±—É–≤–∞—Ç–∏ —â–µ —Ä–∞–∑."
        xp_reward = 3

    async for session in get_async_session():
        new_xp = await update_user_xp(session, message.from_user.id, xp_reward)
        user = await get_user(session, message.from_user.id)
        if not user:
            await create_user(
                session,
                user_id=message.from_user.id,
                username=message.from_user.username,
                first_name=message.from_user.first_name,
                last_name=message.from_user.last_name,
                language_code=message.from_user.language_code
            )
            new_xp = xp_reward

    result_message = await message.reply(
        f"""üé≤ <b>–†–µ–∑—É–ª—å—Ç–∞—Ç –≥—Ä–∏ –≤ –∫—É–±–∏–∫:</b>

–í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {player_roll}
–†–µ–∑—É–ª—å—Ç–∞—Ç –±–æ—Ç–∞: {bot_roll}

{result_text}

–í–∏ –æ—Ç—Ä–∏–º—É—î—Ç–µ {xp_reward} XP! üåü
–í–∞—à –∑–∞–≥–∞–ª—å–Ω–∏–π —Ä–∞—Ö—É–Ω–æ–∫: {new_xp} XP"""
    )

    GameTracker.end_game(chat_id, "dice", user_id)

    await asyncio.sleep(20)
    try:
        await message.reply_to_message.delete()
        await message.delete()
        await bot_dice_message.delete()
        await result_message.delete()
    except Exception as e:
        logger.error(f"Error deleting dice game messages: {e}")


@router.message(Command("rps"))
async def cmd_rps_in_group(message: Message, l10n: FluentLocalization, bot: Bot):
    """Game Rock-Paper-Scissors in group chat"""
    chat_id = message.chat.id
    user_id = message.from_user.id

    if GameTracker.is_playing(chat_id, "dice", user_id):
        return

    GameTracker.start_game(chat_id, "rps", user_id)

    prompt_message = await message.reply(
        f"""üñêÔ∏è <b>–ö–∞–º—ñ–Ω—å-–ù–æ–∂–∏—Ü—ñ-–ü–∞–ø—ñ—Ä</b>
        
{message.from_user.first_name}, –≤—ñ–¥–ø—Ä–∞–≤—Ç–µ –æ–¥–∏–Ω –∑ –µ–º–æ–¥–∂—ñ —É –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ —Ü–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:
ü§ú - –ö–∞–º—ñ–Ω—å
üß≥ - –ü–∞–ø—ñ—Ä
‚úÇÔ∏è - –ù–æ–∂–∏—Ü—ñ"""
    )

    try:
        await asyncio.sleep(30)
        if GameTracker.is_playing(chat_id, "rps", user_id):
            GameTracker.end_game(chat_id, "rps", user_id)
            await prompt_message.delete()
    except Exception as e:
        logger.error(f"Error in RPS game timeout: {e}")


@router.message(F.text.in_(["ü§ú", "‚úÇÔ∏è", "üß≥"]), F.reply_to_message)
async def handle_rps_game(message: Message, bot: Bot):
    """Handle rock-paper-scissors emoji reply"""
    chat_id = message.chat.id
    user_id = message.from_user.id

    if not message.reply_to_message or message.reply_to_message.from_user.id != bot.id or not GameTracker.is_playing(chat_id, "rps", user_id):
        return

    player_choice_emoji = message.text
    player_choice = ""
    if player_choice_emoji == "ü§ú":
        player_choice = "rock"
        player_choice_text = "–ö–∞–º—ñ–Ω—å ü§ú"
    elif player_choice_emoji == "üß≥":
        player_choice = "paper"
        player_choice_text = "–ü–∞–ø—ñ—Ä üß≥"
    elif player_choice_emoji == "‚úÇÔ∏è":
        player_choice = "scissors"
        player_choice_text = "–ù–æ–∂–∏—Ü—ñ ‚úÇÔ∏è"
    else:
        GameTracker.end_game(chat_id, "rps", user_id)
        return

    bot_choice = RockPaperScissorsGame.get_bot_choice()

    if bot_choice == "rock":
        bot_emoji = "ü§ú"
        bot_choice_text = "–ö–∞–º—ñ–Ω—å ü§ú"
    elif bot_choice == "paper":
        bot_emoji = "üß≥"
        bot_choice_text = "–ü–∞–ø—ñ—Ä üß≥"
    else:
        bot_emoji = "‚úÇÔ∏è"
        bot_choice_text = "–ù–æ–∂–∏—Ü—ñ ‚úÇÔ∏è"

    bot_choice_message = await message.answer(bot_emoji)

    await asyncio.sleep(1)

    if player_choice == bot_choice:
        result_text = "ü§∑ –ù—ñ—á–∏—è! –ú–æ–∂–µ—Ç–µ —Å–ø—Ä–æ–±—É–≤–∞—Ç–∏ —â–µ —Ä–∞–∑."
        xp_reward = 5
    elif (
        (player_choice == "rock" and bot_choice == "scissors") or
        (player_choice == "paper" and bot_choice == "rock") or
        (player_choice == "scissors" and bot_choice == "paper")
    ):
        result_text = "üéâ –í–∏ –ø–µ—Ä–µ–º–æ–≥–ª–∏!"
        xp_reward = 15
    else:
        result_text = "üò¢ –í–∏ –ø—Ä–æ–≥—Ä–∞–ª–∏, –∞–ª–µ –≤—Å–µ –æ–¥–Ω–æ –æ—Ç—Ä–∏–º—É—î—Ç–µ –Ω–µ–≤–µ–ª–∏–∫–∏–π –±–æ–Ω—É—Å."
        xp_reward = 2

    async for session in get_async_session():
        new_xp = await update_user_xp(session, message.from_user.id, xp_reward)
        user = await get_user(session, message.from_user.id)
        if not user:
            await create_user(
                session,
                user_id=message.from_user.id,
                username=message.from_user.username,
                first_name=message.from_user.first_name,
                last_name=message.from_user.last_name,
                language_code=message.from_user.language_code
            )
            new_xp = xp_reward

    result_message = await message.reply(
        f"""üñêÔ∏è <b>–†–µ–∑—É–ª—å—Ç–∞—Ç –≥—Ä–∏ –ö–∞–º—ñ–Ω—å-–ù–æ–∂–∏—Ü—ñ-–ü–∞–ø—ñ—Ä:</b>

–í–∞—à –≤–∏–±—ñ—Ä: {player_choice_text}
–í–∏–±—ñ—Ä –±–æ—Ç–∞: {bot_choice_text}

{result_text}

–í–∏ –æ—Ç—Ä–∏–º—É—î—Ç–µ {xp_reward} XP! üåü
–í–∞—à –∑–∞–≥–∞–ª—å–Ω–∏–π —Ä–∞—Ö—É–Ω–æ–∫: {new_xp} XP"""
    )

    GameTracker.end_game(chat_id, "rps", user_id)

    await asyncio.sleep(20)
    try:
        await message.reply_to_message.delete()
        await message.delete()
        await bot_choice_message.delete()
        await result_message.delete()
    except Exception as e:
        logger.error(f"Error deleting RPS game messages: {e}")


@router.message(F.new_chat_members)
async def new_members_handler(message: Message, l10n: FluentLocalization):
    for member in message.new_chat_members:
        if not member.is_bot:
            async for session in get_async_session():
                user = await get_user(session, member.id)
                if user:
                    await register_chat_member(session, member.id, message.chat.id)
                    await update_user_xp(session, member.id, 10)


@router.message(F.text)
async def process_group_message(message: Message):
    """
    –û–±—Ä–æ–±–ª—è—î —Ç–µ–∫—Å—Ç–æ–≤—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ –≥—Ä—É–ø—ñ.
    –ú–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ –ª–æ–≥—ñ–∫—É –Ω–∞—Ä–∞—Ö—É–≤–∞–Ω–Ω—è XP –∑–∞ –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å.
    """
    async for session in get_async_session():
        user = await get_user(session, message.from_user.id)
        if user:
            await update_user_xp(session, message.from_user.id, 1)
            is_admin = False
            try:
                chat_member = await message.chat.get_member(message.from_user.id)
                is_admin = chat_member.status in ["administrator", "creator"]
            except Exception as e:
                logger.error(f"Error checking admin status: {e}")

            await register_chat_member(
                session, 
                message.from_user.id, 
                message.chat.id,
                is_admin=is_admin
            )
