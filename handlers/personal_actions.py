import structlog
from datetime import datetime

from aiogram import Router, F, Bot
from aiogram.exceptions import TelegramBadRequest
from aiogram.filters import Command, CommandStart, CommandObject
from aiogram.types import Message, CallbackQuery
from sqlalchemy.ext.asyncio import AsyncSession

from fluent.runtime import FluentLocalization
from keyboards import (
    get_main_menu_kb, get_profile_kb, get_top_kb, get_settings_kb,
    get_notification_settings_kb, get_privacy_settings_kb,
    get_games_menu_kb, get_webapp_games_kb
)
from db.connection import get_async_session
from db.queries import (
    get_user, create_user, update_user_activity, 
    get_top_users, get_user_rank, get_referral_count
)


router = Router()
router.message.filter(F.chat.type == "private")


logger = structlog.get_logger()


def format_datetime(dt: datetime) -> str:
    return dt.strftime("%d.%m.%Y %H:%M")


@router.message(CommandStart())
async def cmd_start(message: Message, l10n: FluentLocalization, command: CommandObject = None):
    async for session in get_async_session():
        user = await get_user(session, message.from_user.id)
        
        # Handle referral links
        referrer_id = None
        if command and command.args and command.args.startswith("ref_"):
            try:
                referrer_id = int(command.args.split("_")[1])
                referrer = await get_user(session, referrer_id)
                if referrer and referrer_id != message.from_user.id:
                    # Give bonus to referrer
                    await update_user_xp(session, referrer_id, 50)
                    logger.info(f"Referrer {referrer_id} got 50 XP for inviting {message.from_user.id}")
            except (ValueError, IndexError):
                referrer_id = None

        if not user:
            user = await create_user(
                session,
                user_id=message.from_user.id,
                username=message.from_user.username,
                first_name=message.from_user.first_name,
                last_name=message.from_user.last_name,
                language_code=message.from_user.language_code,
                referred_by=referrer_id
            )
            logger.info(f"Created new user: {user.user_id}")
            
            if referrer_id:
                welcome_text = l10n.format_value("hello-referral-msg", {
                    "name": message.from_user.first_name,
                    "referrer_bonus": 50
                })
            else:
                welcome_text = l10n.format_value("hello-new-user-msg", {"name": message.from_user.first_name})
        else:
            await update_user_activity(session, message.from_user.id)
            welcome_text = l10n.format_value("hello-msg", {"name": message.from_user.first_name})

    await message.answer(
        welcome_text,
        reply_markup=get_main_menu_kb(l10n)
    )


@router.message(Command("profile"))
async def cmd_profile(message: Message, l10n: FluentLocalization, bot: Bot):
    await show_profile(message.from_user.id, message, l10n, bot)


@router.message(Command("top"))
async def cmd_top(message: Message, l10n: FluentLocalization):
    await show_top(message.from_user.id, message, l10n, position=1)


@router.message(Command("about"))
async def cmd_about(message: Message, l10n: FluentLocalization):
    await message.answer(
        l10n.format_value("about-bot"),
        reply_markup=get_main_menu_kb(l10n)
    )


@router.callback_query(F.data == "main_menu")
async def callback_main_menu(query: CallbackQuery, l10n: FluentLocalization):
    await query.message.edit_text(
        l10n.format_value("hello-msg", {"name": query.from_user.first_name}),
        reply_markup=get_main_menu_kb(l10n)
    )
    await query.answer()

@router.callback_query(F.data == "profile")
async def callback_profile(query: CallbackQuery, l10n: FluentLocalization, bot: Bot):
    await show_profile(query.from_user.id, query.message, l10n, bot, is_edit=True)
    await query.answer()


@router.callback_query(F.data == "about")
async def callback_about(query: CallbackQuery, l10n: FluentLocalization):
    await query.message.edit_text(
        l10n.format_value("about-bot"),
        reply_markup=get_main_menu_kb(l10n)
    )
    await query.answer()


@router.callback_query(F.data.startswith("top:"))
async def callback_top(query: CallbackQuery, l10n: FluentLocalization):
    position = query.data.split(":")[1]
    if position == "me":
        position = 0
    else:
        position = int(position)
    
    await show_top(query.from_user.id, query.message, l10n, position=position, is_edit=True)
    await query.answer()


@router.callback_query(F.data == "referral")
async def callback_referral(query: CallbackQuery, l10n: FluentLocalization, bot: Bot):
    bot_info = await bot.get_me()
    ref_link = f"https://t.me/{bot_info.username}?start=ref_{query.from_user.id}"

    async for session in get_async_session():
        ref_count = await get_referral_count(session, query.from_user.id)
    
    await query.message.edit_text(
        l10n.format_value("referral-info", {
            "link": ref_link,
            "count": ref_count
        }),
        reply_markup=get_profile_kb(l10n)
    )
    await query.answer()


async def show_profile(user_id: int, message_or_query, l10n: FluentLocalization, bot: Bot, is_edit=False):
    """–í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    async for session in get_async_session():
        user = await get_user(session, user_id)
        if not user:
            logger.error(f"User {user_id} not found")
            return

        rank = await get_user_rank(session, user_id)

        referrals = await get_referral_count(session, user_id)

    profile_text = l10n.format_value("profile-info", {
        "name": user.first_name + (f" {user.last_name}" if user.last_name else ""),
        "user_id": user.user_id,
        "xp": user.xp,
        "bonuses": user.bonuses,
        "referrals": referrals,
        "last_activity": format_datetime(user.last_activity),
        "registered_at": format_datetime(user.created_at),
        "rank": rank
    })

    try:
        user_photos = await bot.get_user_profile_photos(user_id, limit=1)
        has_photo = user_photos.total_count > 0
    except Exception as e:
        logger.error(f"Error getting profile photo: {e}")
        has_photo = False

    if is_edit:
        await message_or_query.edit_text(
            profile_text,
            reply_markup=get_profile_kb(l10n)
        )
    else:
        if has_photo:
            photo = user_photos.photos[0][-1]
            await message_or_query.answer_photo(
                photo.file_id,
                caption=profile_text,
                reply_markup=get_profile_kb(l10n)
            )
        else:
            await message_or_query.answer(
                profile_text,
                reply_markup=get_profile_kb(l10n)
            )


async def show_top(user_id: int, message_or_query, l10n: FluentLocalization, position=1, is_edit=False):
    """–í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Ç–æ–ø—É –≥—Ä–∞–≤—Ü—ñ–≤"""
    from sqlalchemy import text
    
    async for session in get_async_session():
        top_users = await get_top_users(session, limit=10)
        user_rank = await get_user_rank(session, user_id)
        total_users = await session.execute(text("SELECT COUNT(*) FROM users"))
        total_users = total_users.scalar()
    
    if position == 0:
        user = await get_user(session, user_id)
        top_text = f"{l10n.format_value('top-players-title')}\n\n"
        top_text += l10n.format_value('top-player-item', {
            "position": user_rank,
            "name": user.first_name,
            "xp": user.xp
        })
        top_text += "\n\n" + l10n.format_value('top-your-position', {
            "position": user_rank,
            "total": total_users
        })
    else:
        top_text = f"{l10n.format_value('top-players-title')}\n\n"
        for i, user in enumerate(top_users[:10], 1):
            medal = "ü•á" if i == 1 else "ü•à" if i == 2 else "ü•â" if i == 3 else "üèÖ"
            top_text += f"{medal} {i}. {user.first_name} - {user.xp} XP\n"
        
        top_text += "\n" + l10n.format_value('top-your-position', {
            "position": user_rank,
            "total": total_users
        })

    if is_edit:
        await message_or_query.edit_text(
            top_text,
            reply_markup=get_top_kb(l10n)
        )
    else:
        await message_or_query.answer(
            top_text,
            reply_markup=get_top_kb(l10n)
        )


@router.message(Command("settings"))
async def cmd_settings(message: Message, l10n: FluentLocalization):
    """–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    await message.answer(
        l10n.format_value("settings-msg"),
        reply_markup=get_settings_kb(l10n)
    )


@router.callback_query(F.data == "settings")
async def callback_settings(query: CallbackQuery, l10n: FluentLocalization):
    """–í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å"""
    await query.message.edit_text(
        l10n.format_value("settings-msg"),
        reply_markup=get_settings_kb(l10n)
    )
    await query.answer()


@router.callback_query(F.data == "achievements")
async def callback_achievements(query: CallbackQuery, l10n: FluentLocalization):
    """–í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –¥–æ—Å—è–≥–Ω–µ–Ω—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    async for session in get_async_session():
        user = await get_user(session, query.from_user.id)
        if not user:
            await query.answer("–ü–æ–º–∏–ª–∫–∞: –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π")
            return
        
        # –ü—Ä–æ—Å—Ç–∏–π —Å–ø–∏—Å–æ–∫ –¥–æ—Å—è–≥–Ω–µ–Ω—å –Ω–∞ –æ—Å–Ω–æ–≤—ñ XP
        achievements = []
        
        if user.xp >= 10:
            achievements.append("üéØ –ù–æ–≤–∞—á–æ–∫ (10+ XP)")
        if user.xp >= 50:
            achievements.append("‚≠ê –ê–∫—Ç–∏–≤–Ω–∏–π –≥—Ä–∞–≤–µ—Ü—å (50+ XP)")
        if user.xp >= 100:
            achievements.append("üî• –î–æ—Å–≤—ñ–¥—á–µ–Ω–∏–π (100+ XP)")
        if user.xp >= 250:
            achievements.append("üíé –ï–∫—Å–ø–µ—Ä—Ç (250+ XP)")
        if user.xp >= 500:
            achievements.append("üëë –ú–∞–π—Å—Ç–µ—Ä (500+ XP)")
        if user.xp >= 1000:
            achievements.append("üèÜ –õ–µ–≥–µ–Ω–¥–∞ (1000+ XP)")
        
        # –î–æ—Å—è–≥–Ω–µ–Ω–Ω—è –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞–º
        ref_count = await get_referral_count(session, query.from_user.id)
        if ref_count >= 1:
            achievements.append("ü§ù –ó–∞–ø—Ä–æ—à—É–≤–∞–≤ –¥—Ä—É–∑—ñ–≤ (1+ —Ä–µ—Ñ–µ—Ä–∞–ª)")
        if ref_count >= 5:
            achievements.append("üë• –ü–æ–ø—É–ª—è—Ä–Ω–∏–π (5+ —Ä–µ—Ñ–µ—Ä–∞–ª—ñ–≤)")
        if ref_count >= 10:
            achievements.append("üåü –õ—ñ–¥–µ—Ä —Å–ø—ñ–ª—å–Ω–æ—Ç–∏ (10+ —Ä–µ—Ñ–µ—Ä–∞–ª—ñ–≤)")
        
        achievements_text = l10n.format_value("achievements-title") + "\n\n"
        if achievements:
            achievements_text += "\n".join(achievements)
        else:
            achievements_text += l10n.format_value("achievements-none")
        
        achievements_text += f"\n\n{l10n.format_value('achievements-stats-title')}\nüí∞ XP: {user.xp}\nüéÅ –ë–æ–Ω—É—Å–∏: {user.bonuses}\nüë• –ó–∞–ø—Ä–æ—à–µ–Ω–æ –¥—Ä—É–∑—ñ–≤: {ref_count}"
    
    await query.message.edit_text(
        achievements_text,
        reply_markup=get_profile_kb(l10n)
    )
    await query.answer()


@router.message(Command("help"))
async def cmd_help(message: Message, l10n: FluentLocalization):
    """–î–æ–≤—ñ–¥–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞—Ö –±–æ—Ç–∞"""
    help_text = """üìö <b>–î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:</b>

üè† /start - –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é
üë§ /profile - –í–∞—à –ø—Ä–æ—Ñ—ñ–ª—å
üèÜ /top - –¢–æ–ø –≥—Ä–∞–≤—Ü—ñ–≤
üéÆ /dice - –ì—Ä–∞ –≤ –∫–æ—Å—Ç—ñ
üñêÔ∏è /rps - –ö–∞–º—ñ–Ω—å-–Ω–æ–∂–∏—Ü—ñ-–ø–∞–ø—ñ—Ä
‚öôÔ∏è /settings - –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
üÜò /help - –¶—è –¥–æ–≤—ñ–¥–∫–∞
üìñ /about - –ü—Ä–æ –±–æ—Ç–∞

<b>–Ø–∫ –æ—Ç—Ä–∏–º—É–≤–∞—Ç–∏ XP:</b>
‚Ä¢ –ì—Ä–∞–π—Ç–µ –≤ —ñ–≥—Ä–∏ (10-15 XP –∑–∞ –ø–µ—Ä–µ–º–æ–≥—É)
‚Ä¢ –ó–∞–ø—Ä–æ—à—É–π—Ç–µ –¥—Ä—É–∑—ñ–≤ (50 XP –∑–∞ –∫–æ–∂–Ω–æ–≥–æ)
‚Ä¢ –ë—É–¥—å—Ç–µ –∞–∫—Ç–∏–≤–Ω–∏–º–∏ –≤ —á–∞—Ç–∞—Ö (1 XP –∑–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è)

<b>–ë–æ–Ω—É—Å–∏ –º–æ–∂–Ω–∞ –≤–∏—Ç—Ä–∞—á–∞—Ç–∏ –Ω–∞:</b>
‚Ä¢ –ü—Ä–∏—Å–∫–æ—Ä–µ–Ω–Ω—è –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è –µ–Ω–µ—Ä–≥—ñ—ó
‚Ä¢ –î–æ–¥–∞—Ç–∫–æ–≤—ñ —Å–ø—Ä–æ–±–∏ –≤ —ñ–≥—Ä–∞—Ö
‚Ä¢ –£–Ω—ñ–∫–∞–ª—å–Ω—ñ –¥–æ—Å—è–≥–Ω–µ–Ω–Ω—è

–î–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–æ–¥–∞—Ç–∫–æ–≤–æ—ó —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é! üéØ"""
    
    await message.answer(
        help_text,
        reply_markup=get_main_menu_kb(l10n)
    )


@router.callback_query(F.data == "help")
async def callback_help(query: CallbackQuery, l10n: FluentLocalization):
    """–î–æ–≤—ñ–¥–∫–∞ —á–µ—Ä–µ–∑ callback"""
    help_text = """üìö <b>–î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:</b>

üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é - –ø–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –ø–æ—á–∞—Ç–∫—É
üë§ –ü—Ä–æ—Ñ—ñ–ª—å - –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Å–≤–æ—ó –¥–∞–Ω—ñ
üèÜ –¢–æ–ø - —Ä–µ–π—Ç–∏–Ω–≥ –Ω–∞–π–∫—Ä–∞—â–∏—Ö –≥—Ä–∞–≤—Ü—ñ–≤
üéÆ –Ü–≥—Ä–∏ - —Ä–æ–∑–≤–∞–≥–∏ —Ç–∞ –∑–∞—Ä–æ–±—ñ—Ç–æ–∫ XP
‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è - –ø–µ—Ä—Å–æ–Ω–∞–ª—ñ–∑–∞—Ü—ñ—è
üÜò –î–æ–≤—ñ–¥–∫–∞ - —Ü—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è
üìñ –ü—Ä–æ –±–æ—Ç–∞ - –¥–µ—Ç–∞–ª—å–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è

<b>–Ø–∫ –ø—Ä–∞—Ü—é—é—Ç—å —ñ–≥—Ä–∏:</b>
üé≤ –ö–æ—Å—Ç—ñ - –∫–∏–¥–∞–π—Ç–µ –∫—É–±–∏–∫ –ø—Ä–æ—Ç–∏ –±–æ—Ç–∞
üñêÔ∏è –ö–∞–º—ñ–Ω—å-–Ω–æ–∂–∏—Ü—ñ-–ø–∞–ø—ñ—Ä - –∫–ª–∞—Å–∏—á–Ω–∞ –≥—Ä–∞

<b>–°–∏—Å—Ç–µ–º–∞ –Ω–∞–≥–æ—Ä–æ–¥:</b>
ü•á –ü–µ—Ä–µ–º–æ–≥–∞: 10-15 XP
ü§ù –ù—ñ—á–∏—è: 3-5 XP  
üòî –ü–æ—Ä–∞–∑–∫–∞: 1-2 XP
üë• –†–µ—Ñ–µ—Ä–∞–ª: 50 XP

–ì—Ä–∞–π—Ç–µ, –∑–∞–ø—Ä–æ—à—É–π—Ç–µ –¥—Ä—É–∑—ñ–≤ —Ç–∞ —Å—Ç–∞–≤–∞–π—Ç–µ –Ω–∞–π–∫—Ä–∞—â–∏–º–∏! üåü"""
    
    await query.message.edit_text(
        help_text,
        reply_markup=get_main_menu_kb(l10n)
    )
    await query.answer()


@router.message(Command("daily"))
async def cmd_daily_bonus(message: Message, l10n: FluentLocalization):
    """–©–æ–¥–µ–Ω–Ω–∏–π –±–æ–Ω—É—Å"""
    async for session in get_async_session():
        user = await get_user(session, message.from_user.id)
        if not user:
            await message.answer(l10n.format_value("daily-bonus-register-first"))
            return
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –º–æ–∂–Ω–∞ –æ—Ç—Ä–∏–º–∞—Ç–∏ —â–æ–¥–µ–Ω–Ω–∏–π –±–æ–Ω—É—Å
        from datetime import datetime, timedelta
        now = datetime.now()
        
        # –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —â–µ –Ω–µ –æ—Ç—Ä–∏–º—É–≤–∞–≤ –±–æ–Ω—É—Å —Å—å–æ–≥–æ–¥–Ω—ñ
        if user.last_daily_bonus is None or (now - user.last_daily_bonus).days >= 1:
            daily_bonus = 25
            await update_user_xp(session, message.from_user.id, daily_bonus)
            
            # –û–Ω–æ–≤–ª—é—î–º–æ —á–∞—Å –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –±–æ–Ω—É—Å—É (—Ç—É—Ç –ø–æ—Ç—Ä—ñ–±–Ω–æ –¥–æ–¥–∞—Ç–∏ —Ü–µ –ø–æ–ª–µ –≤ –º–æ–¥–µ–ª—å)
            # await update_user_daily_bonus(session, message.from_user.id, now)
            
            await message.answer(
                l10n.format_value("daily-bonus-received", {
                    "bonus": daily_bonus,
                    "total": user.xp + daily_bonus
                }),
                reply_markup=get_main_menu_kb(l10n)
            )
        else:
            hours_left = 24 - (now - user.last_daily_bonus).seconds // 3600
            await message.answer(
                l10n.format_value("daily-bonus-already-claimed", {
                    "hours": hours_left
                }),
                reply_markup=get_main_menu_kb(l10n)
            )


@router.callback_query(F.data == "daily")
async def callback_daily_bonus(query: CallbackQuery, l10n: FluentLocalization):
    """–©–æ–¥–µ–Ω–Ω–∏–π –±–æ–Ω—É—Å —á–µ—Ä–µ–∑ callback"""
    await cmd_daily_bonus(query.message, l10n)
    await query.answer()


# –•–µ–Ω–¥–ª–µ—Ä–∏ –¥–ª—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å
@router.callback_query(F.data.startswith("settings:"))
async def callback_settings_menu(query: CallbackQuery, l10n: FluentLocalization):
    """–û–±—Ä–æ–±–∫–∞ —Ä—ñ–∑–Ω–∏—Ö —Ä–æ–∑–¥—ñ–ª—ñ–≤ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å"""
    setting_type = query.data.split(":")[1]
    
    if setting_type == "notifications":
        await query.message.edit_text(
            "<b>üîî –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å–ø–æ–≤—ñ—â–µ–Ω—å</b>\n\n"
            "–û–±–µ—Ä—ñ—Ç—å, —è–∫—ñ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –≤–∏ —Ö–æ—á–µ—Ç–µ –æ—Ç—Ä–∏–º—É–≤–∞—Ç–∏:",
            reply_markup=get_notification_settings_kb(l10n)
        )
    elif setting_type == "language":
        await query.message.edit_text(
            "<b>üåê –í–∏–±—ñ—Ä –º–æ–≤–∏</b>\n\n"
            "–û–±–µ—Ä—ñ—Ç—å –∑—Ä—É—á–Ω—É –¥–ª—è –≤–∞—Å –º–æ–≤—É —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É:",
            reply_markup=get_language_settings_kb(l10n)
        )
    elif setting_type == "privacy":
        await query.message.edit_text(
            "<b>üìä –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç—ñ</b>\n\n"
            "–ö–µ—Ä—É–π—Ç–µ –≤–∏–¥–∏–º—ñ—Å—Ç—é –≤–∞—à–æ–≥–æ –ø—Ä–æ—Ñ—ñ–ª—é —Ç–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:",
            reply_markup=get_privacy_settings_kb(l10n)
        )
    elif setting_type == "theme":
        await query.message.edit_text(
            "<b>üé® –í–∏–±—ñ—Ä —Ç–µ–º–∏</b>\n\n"
            "–í–∏–±–µ—Ä—ñ—Ç—å —Ç–µ–º—É –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è (–ø–æ–∫–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ):\n"
            "‚Ä¢ üåô –¢–µ–º–Ω–∞ —Ç–µ–º–∞\n"
            "‚Ä¢ ‚òÄÔ∏è –°–≤—ñ—Ç–ª–∞ —Ç–µ–º–∞\n"
            "‚Ä¢ üåà –ö–æ–ª—å–æ—Ä–æ–≤–∞ —Ç–µ–º–∞",
            reply_markup=get_settings_kb(l10n)
        )
    elif setting_type == "stats":
        async for session in get_async_session():
            user = await get_user(session, query.from_user.id)
            if user:
                days_registered = (datetime.now() - user.created_at).days
                avg_xp_per_day = user.xp / max(days_registered, 1)
                
                stats_text = f"""<b>üìà –î–µ—Ç–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>

<b>üë§ –ü—Ä–æ—Ñ—ñ–ª—å:</b>
‚Ä¢ ID: {user.user_id}
‚Ä¢ –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è: {format_datetime(user.created_at)}
‚Ä¢ –î–Ω—ñ–≤ –∑ –Ω–∞–º–∏: {days_registered}

<b>üí∞ XP —Ç–∞ –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å:</b>
‚Ä¢ –ó–∞–≥–∞–ª—å–Ω–∏–π XP: {user.xp}
‚Ä¢ –°–µ—Ä–µ–¥–Ω—ñ–π XP –Ω–∞ –¥–µ–Ω—å: {avg_xp_per_day:.1f}
‚Ä¢ –ë–æ–Ω—É—Å–∏: {user.bonuses}
‚Ä¢ –û—Å—Ç–∞–Ω–Ω—è –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å: {format_datetime(user.last_activity)}

<b>üë• –°–æ—Ü—ñ–∞–ª—å–Ω–∞ –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å:</b>
‚Ä¢ –ó–∞–ø—Ä–æ—à–µ–Ω–æ –¥—Ä—É–∑—ñ–≤: {await get_referral_count(session, query.from_user.id)}
‚Ä¢ –ü–æ–∑–∏—Ü—ñ—è –≤ —Ä–µ–π—Ç–∏–Ω–≥—É: {await get_user_rank(session, query.from_user.id)}

<b>üéÆ –Ü–≥—Ä–æ–≤–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>
‚Ä¢ –ó–∞–≥–∞–ª—å–Ω—ñ —ñ–≥—Ä–∏: —Å–∫–æ—Ä–æ...
‚Ä¢ –ü–µ—Ä–µ–º–æ–≥–∏: —Å–∫–æ—Ä–æ...
‚Ä¢ –ü–æ—Ä–∞–∑–∫–∏: —Å–∫–æ—Ä–æ..."""
                
                await query.message.edit_text(
                    stats_text,
                    reply_markup=get_settings_kb(l10n)
                )
    
    await query.answer()


@router.callback_query(F.data.startswith("notifications:"))
async def callback_notifications_settings(query: CallbackQuery, l10n: FluentLocalization):
    """–û–±—Ä–æ–±–∫–∞ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å —Å–ø–æ–≤—ñ—â–µ–Ω—å"""
    action = query.data.split(":")[1]
    
    if action == "all_on":
        message_text = "üîî –í—Å—ñ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è —É–≤—ñ–º–∫–Ω–µ–Ω—ñ!"
    elif action == "all_off":
        message_text = "üîï –í—Å—ñ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –≤–∏–º–∫–Ω–µ–Ω—ñ!"
    elif action == "games_only":
        message_text = "üéÆ –£–≤—ñ–º–∫–Ω–µ–Ω—ñ —Ç—ñ–ª—å–∫–∏ —ñ–≥—Ä–æ–≤—ñ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è!"
    elif action == "social_only":
        message_text = "üë• –£–≤—ñ–º–∫–Ω–µ–Ω—ñ —Ç—ñ–ª—å–∫–∏ —Å–æ—Ü—ñ–∞–ª—å–Ω—ñ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è!"
    else:
        message_text = "‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∑–±–µ—Ä–µ–∂–µ–Ω—ñ!"
    
    await query.answer(message_text, show_alert=True)
    await query.message.edit_text(
        "<b>üîî –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å–ø–æ–≤—ñ—â–µ–Ω—å</b>\n\n"
        f"{message_text}\n\n"
        "–û–±–µ—Ä—ñ—Ç—å, —è–∫—ñ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –≤–∏ —Ö–æ—á–µ—Ç–µ –æ—Ç—Ä–∏–º—É–≤–∞—Ç–∏:",
        reply_markup=get_notification_settings_kb(l10n)
    )


@router.callback_query(F.data.startswith("language:"))
async def callback_language_settings(query: CallbackQuery, l10n: FluentLocalization):
    """–û–±—Ä–æ–±–∫–∞ –∑–º—ñ–Ω–∏ –º–æ–≤–∏"""
    language = query.data.split(":")[1]
    
    language_names = {
        "uk": "üá∫üá¶ –£–∫—Ä–∞—ó–Ω—Å—å–∫–∞",
        "ru": "üá∑üá∫ –†—É—Å—Å–∫–∏–π", 
        "en": "üá∫üá∏ English"
    }
    
    selected_language = language_names.get(language, "üá∫üá¶ –£–∫—Ä–∞—ó–Ω—Å—å–∫–∞")
    
    # –¢—É—Ç –º–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ –ª–æ–≥—ñ–∫—É –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –º–æ–≤–∏ –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö
    # await update_user_language(session, query.from_user.id, language)
    
    await query.answer(f"–û–±—Ä–∞–Ω–æ –º–æ–≤—É: {selected_language}", show_alert=True)
    await query.message.edit_text(
        "<b>üåê –í–∏–±—ñ—Ä –º–æ–≤–∏</b>\n\n"
        f"–ü–æ—Ç–æ—á–Ω–∞ –º–æ–≤–∞: {selected_language}\n\n"
        "–û–±–µ—Ä—ñ—Ç—å –∑—Ä—É—á–Ω—É –¥–ª—è –≤–∞—Å –º–æ–≤—É —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É:",
        reply_markup=get_language_settings_kb(l10n)
    )


@router.callback_query(F.data == "games_menu")
async def callback_games_menu(query: CallbackQuery, l10n: FluentLocalization):
    """–ú–µ–Ω—é —ñ–≥–æ—Ä"""
    
    games_text = l10n.format_value("games-menu-title") + "\n\n" + \
                 l10n.format_value("games-dice-description") + "\n" + \
                 l10n.format_value("games-rps-description") + "\n" + \
                 l10n.format_value("games-webapp-description") + "\n\n" + \
                 l10n.format_value("games-rewards-info")
    
    await query.message.edit_text(
        games_text,
        reply_markup=get_games_menu_kb(l10n)
    )
    await query.answer()


@router.callback_query(F.data.startswith("privacy:"))
async def callback_privacy_settings(query: CallbackQuery, l10n: FluentLocalization):
    """–û–±—Ä–æ–±–∫–∞ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç—ñ"""
    privacy_type = query.data.split(":")[1]
    
    if privacy_type == "profile_public":
        message_text = "üëÅÔ∏è –ü—Ä–æ—Ñ—ñ–ª—å —Ç–µ–ø–µ—Ä –ø—É–±–ª—ñ—á–Ω–∏–π!"
    elif privacy_type == "profile_private":
        message_text = "üï∂Ô∏è –ü—Ä–æ—Ñ—ñ–ª—å —Ç–µ–ø–µ—Ä –ø—Ä–∏–≤–∞—Ç–Ω–∏–π!"
    elif privacy_type == "stats_public":
        message_text = "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–µ–ø–µ—Ä –≤–∏–¥–∏–º–∞ –≤—Å—ñ–º!"
    elif privacy_type == "stats_private":
        message_text = "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–µ–ø–µ—Ä –ø—Ä–∏—Ö–æ–≤–∞–Ω–∞!"
    else:
        message_text = "‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∑–±–µ—Ä–µ–∂–µ–Ω—ñ!"
    
    # –¢—É—Ç –º–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ –ª–æ–≥—ñ–∫—É –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç—ñ –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö
    # await update_user_privacy_settings(session, query.from_user.id, privacy_type)
    
    await query.answer(message_text, show_alert=True)
    await query.message.edit_text(
        "<b>üìä –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç—ñ</b>\n\n"
        f"{message_text}\n\n"
        "–ö–µ—Ä—É–π—Ç–µ –≤–∏–¥–∏–º—ñ—Å—Ç—é –≤–∞—à–æ–≥–æ –ø—Ä–æ—Ñ—ñ–ª—é —Ç–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:",
        reply_markup=get_privacy_settings_kb(l10n)
    )


@router.callback_query(F.data == "games:webapp")
async def callback_webapp_games(query: CallbackQuery, l10n: FluentLocalization):
    """–ú–µ–Ω—é –≤–µ–±-—ñ–≥–æ—Ä"""
    
    webapp_text = l10n.format_value("webapp-games-title") + "\n\n" + \
                  l10n.format_value("webapp-rps-description") + "\n" + \
                  l10n.format_value("webapp-ttt-description") + "\n\n" + \
                  l10n.format_value("webapp-bonus-info")
    
    await query.message.edit_text(
        webapp_text,
        reply_markup=get_webapp_games_kb(l10n)
    )
    await query.answer()


@router.callback_query(F.data.startswith("webapp:"))
async def callback_webapp_launch(query: CallbackQuery, l10n: FluentLocalization):
    """–ó–∞–ø—É—Å–∫ –≤–µ–±-–¥–æ–¥–∞—Ç–∫—ñ–≤"""
    from keyboards.games import get_rps_webapp_kb, get_ttt_webapp_kb
    
    webapp_type = query.data.split(":")[1]
    
    if webapp_type == "rps":
        await query.message.answer(
            l10n.format_value("rps-webapp-start"),
            reply_markup=get_rps_webapp_kb(l10n)
        )
    elif webapp_type == "ttt":
        await query.message.answer(
            l10n.format_value("ttt-webapp-start"),
            reply_markup=get_ttt_webapp_kb(l10n)
        )
    
    await query.answer()


@router.callback_query(F.data == "my_bonuses")
async def callback_my_bonuses(query: CallbackQuery, l10n: FluentLocalization):
    """–í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –±–æ–Ω—É—Å—ñ–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    async for session in get_async_session():
        user = await get_user(session, query.from_user.id)
        if not user:
            await query.answer("–ü–æ–º–∏–ª–∫–∞: –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π")
            return
        
        bonuses_text = l10n.format_value("my-bonuses-info", {
            "bonuses": user.bonuses,
            "xp": user.xp
        })
    
    await query.message.edit_text(
        bonuses_text,
        reply_markup=get_profile_kb(l10n)
    )
    await query.answer()


@router.callback_query(F.data == "top")
async def callback_top_menu(query: CallbackQuery, l10n: FluentLocalization):
    """–í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Ç–æ–ø—É —á–µ—Ä–µ–∑ callback"""
    await show_top(query.from_user.id, query.message, l10n, position=1, is_edit=True)
    await query.answer()

